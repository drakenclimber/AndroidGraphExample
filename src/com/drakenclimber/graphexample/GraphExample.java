/*******************************************************************************
*
*  Copyright 2011-2012 Drakenclimber, LLC.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
********************************************************************************
* Revision information.  DO NOT MODIFY.  This is auto-generated by the SCM.
*
* $Date: 2012-01-15 15:09:58 -0600 (Sun, 15 Jan 2012) $
* $Revision: 34 $
*
*******************************************************************************/
/**
 * Doxygen comment block
 * @file
 *
 * @brief   Android Example Class for Displaying a Graph
 *
 */

package com.drakenclimber.graphexample;

/*******************************************************************************
 * Imports
 ******************************************************************************/
import com.drakenclimber.graph.GraphData;
import com.drakenclimber.graph.LineGraphView;

import android.app.Activity;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.util.Log;

/*******************************************************************************
 * Classes
 ******************************************************************************/
public class GraphExample extends Activity implements SensorEventListener {
    /***************************************************************************
     * Final Variables
     **************************************************************************/
    static final int                    ACCEL_DATA_COUNT    = 512;
    
    /* update the graphs at 5 Hz */
    static final int                    UPDATE_TIME_MILLIS  = 200;
    static final String                 TAG                 = "GraphEx";

    /***************************************************************************
     * Public Variables
     **************************************************************************/

    /***************************************************************************
     * Private Classes
     **************************************************************************/
    
    /***************************************************************************
     * Private Variables
     **************************************************************************/
    /* widgets */
    private LineGraphView               mAccelGraphView     = null;
    private LineGraphView               mAccelMagGraphView  = null;
    
    /* data for the accelerometer graph */
    private GraphData                   mXAccelData         = null;
    private GraphData                   mYAccelData         = null;
    private GraphData                   mZAccelData         = null;
    
    /* data for the accelerometer magnitude graph */
    private GraphData                   mAccelMagData       = null;

    /* sensor widgets */
    private Sensor                      mAccelerometer      = null;
    private SensorManager               mSensorManager      = null;

    private long                        mLastGraphDrawTimeMillis;

    /***************************************************************************
     * Methods
     **************************************************************************/

    /** method to handle the creation of the accelerometer demo activity */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.graph_example_layout);

        mLastGraphDrawTimeMillis = System.currentTimeMillis();
        
        /* connect to the sensor manager and the accelerometer */
        mSensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
        listenToAccel();

        /* initialize the accelerometer graph and its data */
        mXAccelData = new GraphData(null, Color.RED, ACCEL_DATA_COUNT);
        mYAccelData = new GraphData(null, Color.GREEN, ACCEL_DATA_COUNT);
        mZAccelData = new GraphData(null, Color.BLUE, ACCEL_DATA_COUNT);
        
        mAccelGraphView = (LineGraphView) findViewById(R.id.WidgetAccelGraph);
        mAccelGraphView.addDataSet(mXAccelData);
        mAccelGraphView.addDataSet(mYAccelData);
        mAccelGraphView.addDataSet(mZAccelData);
        
        /* initialize the accelerometer magnitude graph and its data */
        mAccelMagData = new GraphData(null, Color.WHITE, ACCEL_DATA_COUNT);
        
        mAccelMagGraphView = (LineGraphView) findViewById(R.id.WidgetAccelMagGraph);
        mAccelMagGraphView.addDataSet(mAccelMagData);
        
    }   /* onCreate() */

    /** method to handle the destruction of this activity */
    @Override
    public void onDestroy() {
        stopListeningToAccel();
        super.onDestroy();
    }


    /** method to handle the listening to the accel */
    private void listenToAccel() {

        mAccelerometer = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
        
        if (mSensorManager == null
         || mAccelerometer == null
         || !mSensorManager.registerListener(GraphExample.this, mAccelerometer,
        				SensorManager.SENSOR_DELAY_FASTEST)) {

        	Log.e(TAG, "No accelerometer found.");
        }
        
    } /* listenToAccel() */

    /** method to close the connection to the accel */
    private void stopListeningToAccel() {
        try {
            mSensorManager.unregisterListener(this);
        }
        catch (Throwable t) {
            Log.d(TAG, "Sensor manager unregister failed.");
        }

    } /* stopListeningToAccel() */
    
   
    /** Called when the accuracy of a sensor has changed. */
    public void onAccuracyChanged(Sensor sensor, int accuracy) {
        Log.d(TAG, "onAccuracyChanged: " + sensor + ", accuracy: " + accuracy);
    }   /* onAccuracyChanged() */

    /** Called when sensor data is available */
    public void onSensorChanged(SensorEvent event) {
        /* local variables */
        long    currentTimeMillis = System.currentTimeMillis();
        double  accelMagnitude;

        if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {
            mXAccelData.appendValue(event.values[0]);
            mYAccelData.appendValue(event.values[1]);
            mZAccelData.appendValue(event.values[2]);

            accelMagnitude =
                    (event.values[0] * event.values[0]) +
                    (event.values[1] * event.values[1]) + 
                    (event.values[2] * event.values[2]);
            accelMagnitude = Math.sqrt(accelMagnitude);
            
            mAccelMagData.appendValue((float)accelMagnitude);
        }   /* if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) */

        /* on some devices, accelerometer data can come in quite fast (100+ Hz).
         * only update every UPDATE_TIME_MILLIS milliseconds so that we don't 
         * overload the processor.  
         */
        if ((currentTimeMillis - mLastGraphDrawTimeMillis) >= UPDATE_TIME_MILLIS) {
            mAccelGraphView.invalidate();
            mAccelMagGraphView.invalidate();

            mLastGraphDrawTimeMillis = currentTimeMillis;
        }   /* if ((currentTimeMillis - mLastGraphDrawTimeMillis) >= UPDATE_TIME_MILLIS) */
            
    }   /* onSensorChanged() */
    
} /* GraphExample() class */
