/*******************************************************************************
*
*  Copyright 2011-2012 Drakenclimber, LLC.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
********************************************************************************
* Revision information.  DO NOT MODIFY.  This is auto-generated by the SCM.
*
* $Date: 2012-01-15 15:09:58 -0600 (Sun, 15 Jan 2012) $
* $Revision: 34 $
*
*******************************************************************************/
/**
 * Doxygen comment block
 * @file
 *
 * @brief   Android widget for drawing a line graph
 *
 */
package com.drakenclimber.graph;

import java.util.ArrayList;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Align;
import android.util.AttributeSet;
import android.view.View;

public class LineGraphView extends View {
    private Paint paint;
    private ArrayList<GraphData> dataSets;
    private String title;
    private float minValue;
    private float maxValue;
    private boolean autoScale;
    private int verticalMarkers;

    public LineGraphView(Context context, AttributeSet attrs) {
        super(context, attrs);

        dataSets = new ArrayList<GraphData>();

        title = attrs.getAttributeValue(null, "title");
        if (title == null) {
            title = "";
        }

        this.autoScale = attrs.getAttributeBooleanValue(null, "autoScale",
                false);
        this.verticalMarkers = 10;

        paint = new Paint();
    }   /* LineGraphView() */

    /** method to override the standard android onDraw() method. */
    @Override
    protected void onDraw(Canvas canvas) {
        int border = 20;
        int horizontalStart = border * 2;
        int height = getHeight();
        int width = getWidth() - 1;
        float max;
        float min;
        float diff;
        float graphHeight = height - (2 * border);
        float graphWidth = width - (2 * border);

        /*
         * if autoscale, find the min and max scale values from all the data
         * sets
         */
        if (autoScale) {
            max = Float.MIN_VALUE;
            min = Float.MAX_VALUE;
            for (GraphData gvd : dataSets) {
                if (gvd.getMaxScale() > max) {
                    max = gvd.getMaxScale();
                }
                if (gvd.getMinScale() < min) {
                    min = gvd.getMinScale();
                }
            }
        } else {
            max = maxValue;
            min = minValue;
        }

        diff = max - min;

        paint.setTextAlign(Align.LEFT);

        /* draw the vertical line markers */
        for (int i = 0; i < verticalMarkers + 1; i++) {
            paint.setColor(Color.DKGRAY);
            float y = ((graphHeight / verticalMarkers) * i) + border;
            canvas.drawLine(horizontalStart, y, width, y, paint);
            paint.setColor(Color.WHITE);
            float value = max - (diff / verticalMarkers * i);
            /* round to two decimal places */
            value = Math.round(value * 100f) / 100f;
            canvas.drawText(Float.toString(value), 0, y, paint);
        }

        paint.setTextAlign(Align.CENTER);
        canvas.drawText(title, (graphWidth / 2) + horizontalStart, border - 4,
                paint);

        /* render each data set */
        for (GraphData gvd : dataSets) {
            paint.setColor(gvd.getColor());

            ArrayList<Float> values = gvd.getValues();

            float dataLength = (float) values.size();
            float columnWidth = (width - (2 * border)) / dataLength;
            float halfColumn = columnWidth / 2;
            float prevY = 0;
            for (int i = 0; i < values.size(); i++) {
                float val = values.get(i) - min;
                float rat = val / diff;
                float y = graphHeight * rat;
                if (i > 0) {
                    canvas.drawLine(((i - 1) * columnWidth)
                            + (horizontalStart + 1) + halfColumn,
                            (border - prevY) + graphHeight, (i * columnWidth)
                                    + (horizontalStart + 1) + halfColumn,
                            (border - y) + graphHeight, paint);
                }
                prevY = y;
            }
        }
    }   /* onDraw() */

    /** add a data set to the graph */
    public void addDataSet(GraphData data) {
        dataSets.add(data);
    }   /* addDataSet() */

    /** remove a data set from the graph */
    public void removeDataSet(GraphData data) {
        dataSets.remove(data);
    }   /* removeDataSet() */

    /** set max Y scale. must be done if autoscaling is not used */
    public void setMaxY(float maxY) {
        maxValue = maxY;
    }   /* setMaxY() */

    /** set min Y scale. must be done if autoscaling is not used */
    public void setMinY(float minY) {
        minValue = minY;
    }   /* setMinY() */

    /** set maximum number of values that the graph can show */
    public void setMaxValueCount(int maxValueCount) {
        for (GraphData gvd : dataSets) {
            gvd.setMaxValueCount(maxValueCount);
        }
    }   /* setMaxValueCount() */

    /** set number of vertical line markings */
    public void setNumberVerticalMarkers(int verticalMarkers) {
        this.verticalMarkers = verticalMarkers;
    }   /* setNumberVerticalMarkers() */

    /** reset all the data set values */
    public void resetValues() {
        for (GraphData gvd : dataSets) {
            gvd.resetValues();
        }
    }   /* resetValues() */
}   /* LineGraphView class */
